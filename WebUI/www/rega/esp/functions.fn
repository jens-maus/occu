function ::WriteDPText()
{
  if( system.IsVar("id") )
  {
    object to = dom.GetObject( system.GetVar("id") );
    if( to )
    {
      if( to.IsTypeOf( OT_VARDP ) || to.IsTypeOf( OT_ALARMDP ) )
      {
        integer itoVT = to.ValueType();
        integer itoST = to.ValueSubType();
        boolean btoLogic  = ( (itoVT==ivtBinary)  && (itoST==istBool)    );
        boolean btoList   = ( (itoVT==ivtInteger) && (itoST==istEnum)    );
        boolean btoNumber = ( (itoVT==ivtFloat)   && (itoST==istGeneric) );
        boolean btoAlarm  = ( (itoVT==ivtBinary)  && (itoST==istAlarm)   );
        boolean btoString  = ( (itoVT==ivtString)  && (itoST==istChar8859));
        if( btoLogic || btoAlarm )
        {
          if ( (sValue == "0") || (sValue == "") )
          {
            sRet=sRet#to.ValueName0();
          }
          else
          {
            sRet=sRet#to.ValueName1();
          }
        }
        if( btoList ) 
        { 
          if( sValue == "" )
          {
            sRet=sRet#web.webGetValueFromList(to.ValueList(),0);
          }
          else
          {
            sRet=sRet#web.webGetValueFromList(to.ValueList(),sValue.ToInteger());
          }
        }
        if( btoNumber ) 
        { 
          if (sValue == "")
          {
            real n = 0.0;
            sRet = sRet # n.ToString() # " (" # n.ToString(2);
          }
          else
          {
            sRet = sRet # sValue.ToString() # " (" # sValue.ToString(2);
          }
          if( to.ValueUnit() == "" )
          {
            sRet = sRet # ")";
          }
        }
        if (btoString)
        {
          sRet = sRet # sValue;
          sRet = sRet.Replace("\r\n", "<br/>");
          sRet = sRet.Replace("\r", "<br/>");
          sRet = sRet.Replace("\n", "<br/>");
        }
        if( to.ValueUnit() != "" )
        {
          sRet=sRet#" "#to.ValueUnit();
          if( btoNumber )
          {
            sRet = sRet # ")";
          }
        }
      }
      else
      {
        string tsShortKey = to.HSSID();
        string tsLongKey = to.HSSID();
        object toCH = dom.GetObject( to.Channel() );
        if( toCH )
        {
          tsLongKey = toCH.ChnLabel()#"|"#tsLongKey;
        }
        
        boolean tbOptionList = ( (to.ValueType() == ivtInteger) && (to.ValueSubType() == istEnum) );
        boolean tbAction = ( to.ValueSubType() == istAction );
        boolean tbBinary = ( to.ValueType() == ivtBinary );
        boolean tbRead = (to.Operations() & OPERATION_READ);
        boolean tbEvent = (to.Operations() & OPERATION_EVENT);
        boolean tbWrite = (to.Operations() & OPERATION_WRITE);
        
        boolean bBinary = ( to.ValueTypeStr() == "Binary" );
        boolean bFloat = ( to.ValueTypeStr() == "Float" );
        boolean bSpecial = false;
            
        string sVUTmp = to.ValueUnit().ToString();
        string sSpace = " ";
        
        ! ### SUBSTITUTE SPECIAL VALUES
        real fVal1 = 0.0;
        real fVal2 = 0.0;
        string sSpecial = "";
        string stmpSV;
        foreach(stmpSV,oDP.EnumSpecialIDs())
        {
           fVal1 = oDP.GetSpecialValue(stmpSV);
           fVal2 = sValue.ToFloat();
           if( fVal1 == fVal2 )
           {
             bSpecial = true;
             sSpecial = stmpSV;
             sValue = "";
             sVUTmp = "";
             sSpace = "";
           }
        }
        
        if( tbBinary && (tbRead || tbAction) )
        {
          if( sValue == "0" )
          {
            tsShortKey = tsShortKey#"=FALSE";
            tsLongKey = tsLongKey#"=FALSE";
          }
          else
          {
            tsShortKey = tsShortKey#"=TRUE";
            tsLongKey = tsLongKey#"=TRUE";
          }
        }
        
        if( tbOptionList )
        {
          tsShortKey = tsShortKey#"="#web.webGetValueFromList( to.ValueList(), sValue );
          tsLongKey = tsLongKey#"="#web.webGetValueFromList( to.ValueList(), sValue );
        }
        
        if( bSpecial )
        {
          tsShortKey = tsShortKey#"="#sSpecial;
          tsLongKey = tsLongKey#"="#sSpecial;
        }        
        
        string sVTmp = web.webKeyFromStringTable( tsLongKey );
        if( !sVTmp.Length() )
        {
          sVTmp = web.webKeyFromStringTable( tsShortKey );
          if( !sVTmp.Length() )
          {
            sVTmp = "${unknownMessage} ("#tsShortKey#")";
          }
        }
        
        if( !bSpecial )
        {
          if( sVUTmp == "100%" )
          {
            sValue = sValue.ToFloat() * 100;
            sValue = sValue.ToString();
            sVUTmp = "%";
          }

          if( sVUTmp == "degree" )
          {
            sVUTmp = "°";
          }
          
          if( bBinary )
          {
            sValue = "";
            sSpace = "";
          }
          if( bFloat )
          {
            sValue = sValue.ToFloat();
            if (toCH.Label() != "HM-ES-TX-WM") {
              sValue = sValue.ToString(2);
            } else {
              ! The HM-ES-TX-WM with a fw >= 2.x.y has a accuracy of 4 digits after the decimal point
              ! Older firmware versions only use 2 digits.
              integer chnId = toCH.ID();
              integer devFwMajor = 0;
              Call("/esp/functions.fn::getFirmwareVersion()");
              if (devFwMajor >= 2) {
                sValue = sValue.ToString(4);
              } else {
                sValue = sValue.ToString(2);
              }
            }
          }
          if( (!bBinary) && (!bFloat) )
          {
            if (((toCH.Label() != "HmIPW-DRAP") && (toCH.Label() != "HmIP-HAP") && (toCH.Label() != "HmIP-HAP-B1") && (toCH.Label() != "HmIP-HAP JS1")) || (sVUTmp == "°C") || (sVUTmp == "V")) { ! SPHM-599
              sValue = sValue.ToInteger();
              sValue = sValue.ToString(0);
            }
          }
          
          if( tbOptionList )
          {
            sValue = "";
            sVUTmp = "";
            sSpace = "";
          }
        }
        
        sVTmp = sVTmp#sSpace#sValue#sVUTmp;
        sRet = sVTmp;
      }
    }
  }
}

! [id]
function ::ReceiptAlarm()
{
  if( system.IsVar("id") )
  {
    object oTmpAlarm = dom.GetObject( system.GetVar("id") );
    if( oTmpAlarm )
    {
      Write("AL OK|["#oTmpAlarm.AlTriggerDP()#"]");
      object oAlTriggerDP = dom.GetObject( oTmpAlarm.AlTriggerDP() );
      if( oAlTriggerDP )
      {
        if( oAlTriggerDP.Operations() & OPERATION_WRITE )
        {
          oTmpAlarm.AlReceipt();
        }
      }
      else
      {
        Write(oTmpAlarm.AlReceipt());
      }
    }
  }
}

! [id], [newname]
function ::changeFunctionName() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    obj.Name(system.GetVar("newname"));
    ! - - - wernerf - - - 
    Call("/xml-api/cache.fn::InvalidateFunctionList()");
    ! - - - wernerf - - - 
  }
}

! [name]
function ::createFunctionRetId() {
  if( system.IsVar( "name" ) ) {
    object o = dom.CreateObject( OT_ENUM, system.GetVar( "name" ) );
    if( o ) {
      o.EnumType( etFunction );
      boolean res = dom.GetObject( ID_FUNCTIONS ).Add( o );
      if( !res )
      {
        Write("-1");
        dom.DeleteObject( o.ID() );
      }
      else {
        ! - - - wernerf - - - 
        Call("/xml-api/cache.fn::InvalidateFunctionList()");
        ! - - - wernerf - - -       
        Write(o.ID());
      }
    }
    else {
      Write("-1");
    }
  }
}

! [id]
function ::deleteFunction() {
}

! [id], [newcolor]
function ::changeFunctionColor() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    
  }
}

! [id], [newcomment]
function ::changeFunctionComment() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    obj.EnumInfo(system.GetVar("newcomment"));
    ! - - - wernerf - - - 
    Call("/xml-api/cache.fn::InvalidateFunctionList()");
    ! - - - wernerf - - -     
  }
}

! [id], [newsymbol]
function ::changeFunctionSymbol() {
  object obj = dom.GetObject(system.GetVar("id"));
  if (obj) {
    
  }
}

function ::buildFuncOverlay() {
  object rooms = dom.GetObject(ID_FUNCTIONS);
  string s = "";
  if (rooms) {
    string tmp = "";
    s = s#"<table>";
    foreach( tmp, rooms.EnumEnabledIDs() ) {
       object func = dom.GetObject(tmp);
       s = s# "<tr>";
       s = s# "<td>"# func.Name() # "</td>";
       s = s#"<td><input id='chk"#func.ID()#"' type='checkbox' onclick='addFunc(id, "#tmp#")' /></td>";
       s = s# "</tr>";
    }
    s = s # "<tr>";
      s = s # "<td colspan='2'>";
        !s = s # "<div align='center' class='CLASS01900' onclick='editFuncs();'>Neu...</div>";
        s = s # "<div align='center' class='CLASS01900' onclick='editFuncs();'>${btnSelectRoomOrFunctionNew}</div>";
      s = s # "</td>";
    s = s # "</tr>";
    
    s = s # "<tr>";
      s = s # "<td colspan='2'>";
        !s = s # "<div align='center' class='CLASS01900' onclick='$(\"funcOverlay\").hide();specialReloadPage();'>Schliessen</div>";
        s = s # "<div align='center' class='CLASS01900' onclick='$(\"funcOverlay\").hide();specialReloadPage();'>${btnSelectRoomOrFunctionClose}</div>";
      s = s # "</td>";
    s = s # "</tr>";
    s = s#"</table>";
  }
  Write(s);
}

function ::showHideRFChannel() {
  if(chn.HssType().Find("CONDITION_") != -1) {
    ! channel 3 - 6 of the powermeter
    bShowChannel = false;
  }

  if((chn.HssType().Find("SWITCH_TRANSMIT") != -1) && (chn.HssType().Find("SWITCH_TRANSMITTER") == -1)) {
    ! channel 7 of the ThermalControl-IndoorTemperatureSensor (e. g. HM-TC-IT-WM-W-EU)
    bShowChannel = false;
  }

  ! Status Display EPaper
  if(( (oDevHssType == "HM-Dis-EP-WM55") ) && (chNumber == 3)) {
    ! Hide channel 3 of this device
    bShowChannel = false;
  }
}

function ::showHideHmIPChannel() {
  bShowChannel = true;

  ! A key press doesn't work with the ccu2 and hmip
  ! When the device is not a remote control, don't show the key channel
  !
  ! When the device IS A REMOTE CONTROL, show the channel. The control will say the channel has no function.
  ! Otherwise the control of the remote control would display only the header of the page, which wouldn't look so good.
  if ((chn.HssType().Find("KEY_TRANSCEIVER") != -1) && (
         (oDevHssType != "HmIP-RC8")
      && (oDevHssType != "HMIP-WRC2")
      && (oDevHssType != "HmIP-WRC2")
      && (oDevHssType != "HmIP-WRCC2")
      && (oDevHssType != "HmIP-WRC6")
      && (oDevHssType != "HmIP-KRCA")
      && (oDevHssType != "HmIP-KRCK")
      && (oDevHssType != "HmIP-KRC4")
      && (oDevHssType != "HmIP-MOD-RC8")
      && (oDevHssType != "HmIP-BRC2")
      && (oDevHssType != "HmIP-DBB")
      && (oDevHssType != "HmIP-RCB1")
      && (oDevHssType != "HmIP-WRCR")
      && (oDevHssType != "HmIP-STI")
      && (oDevHssType != "HmIPW-WRC2")
      && (oDevHssType != "HmIPW-BRC2")
      && (oDevHssType != "HmIP-RCV-50")
      )
    )
  {
    bShowChannel = false;
    return;
  }

  if (bShowChannel == true) {

    ! Interface HmIP-RF and HmIP-Wired
    if (chn.HssType().Find("MAINTENANCE") != -1) {
      ! Don't show the maintenance channel of the new HmIP devices
      ! This is necessary because the name of such a channel of an HmIP device
      !   can be MAINTENANCE_BAT_BL, MAINTENANCE_BAT_EL, MAINTENANCE_BAT_CL and so on
      ! For BidCos-RF this isn't necessary

      if ((oDevHssType.Substr(0,6) == "HmIPW-") || (oDevHssType == "HmIP-DRSI1") || (oDevHssType == "HmIP-DRSI4") || (oDevHssType == "HmIP-DRG-DALI")) {
        object chnParam;
        ! A HmIPW-* device with a control for the parameter IDENTIFY_TARGET_LEVEL (MAINTENANCE channel)
        ! should be visible. So it's possible to use the identify function of wHmIPW-devices.
        chnParam = dom.GetObject("HmIP-RF."#chn.Address()#".IDENTIFY_TARGET_LEVEL");

        ! A HmIPW-* device with a control for the parameter ERROR_POWER_SHORT_CIRCUIT_BUS_1 (MAINTENANCE channel)
        ! should be visible. This is the DRAP.
        if (!chnParam) {
          chnParam = dom.GetObject("HmIP-RF."#chn.Address()#".ERROR_POWER_SHORT_CIRCUIT_BUS_1");
        }

        if (chnParam) {
          string controlName = chnParam.MetaData("CONTROL");
          if (! controlName) {
            bShowChannel = false;
          }
        } else {
          bShowChannel = false;
        }
      } else {
        if ((oDevHssType != "HmIP-CCU3") && (oDevHssType != "HmIP-HAP") && (oDevHssType != "HmIP-HAP-B1")  && (oDevHssType != "HmIP-HAP JS1") && (oDevHssType != "RPI-RF-MOD")) {
          bShowChannel = false;
        }
      }

      ! Necessary to be able to learn the codes of keypads and finger print sensors
      if (oDevHssType == "HmIP-FWI") {
        bShowChannel = true;
      }

      if (oDevHssType == "HmIP-WKP") {
        bShowChannel = true;
      }

      if (oDevHssType == "HmIP-SWSD-2") {
        bShowChannel = true;
      }
      return;
    }

    ! SPHM-495
    ! if (chn.HssType().Find("MULTI_MODE_INPUT_TRANSMITTER") != -1) {
    !    if ((chn.MetaData("channelMode") != 3) && ((oDevHssType != "HmIP-DSD-PCB"))) {
    !      bShowChannel = false;
    !    }
    !  return;
    !}

    if (oDevHssType == "HmIP-WKP") {
      if ((chNumber == 2)
        || (chNumber == 4)
        || (chNumber == 6)
        || (chNumber == 8)
        || (chNumber == 10)
        || (chNumber == 12)
        || (chNumber == 14)
        || (chNumber == 16)
      ) {
        bShowChannel = false;
      }
    }

    if ((chn.HssType().Find("DISPLAY_INPUT_TRANSMITTER") != -1) || (chn.HssType().Find("DISPLAY_LEVEL_INPUT_TRANSMITTER") != -1) || (chn.HssType().Find("DISPLAY_THERMOSTAT_INPUT_TRANSMITTER") != -1) )  {
      bShowChannel = false;
      return;
    }

    if (user.UserEasyLinkMode() == true) {
      if ((chn.HssType().Find("DIMMER_TRANSMITTER") != -1)
      || ((chn.HssType().Find("SWITCH_TRANSMITTER") != -1) && (chn.HssType().Find("COND_") == -1))
      || (chn.HssType().Find("BLIND_TRANSMITTER") != -1)
      || (chn.HssType().Find("SHUTTER_TRANSMITTER") != -1)
      || (chn.HssType().Find("ACOUSTIC_SIGNAL_TRANSMITTER") != -1))
      {bShowChannel = false; return;}

      if ((oDevHssType != "HmIP-MIOB") && (oDevHssType != "HmIP-WHS2")) {
        if ((chn.HssType().Find("DIMMER_VIRTUAL_RECEIVER") != -1)
        || (chn.HssType().Find("SWITCH_VIRTUAL_RECEIVER") != -1)
        || (chn.HssType().Find("BLIND_VIRTUAL_RECEIVER") != -1)
        || (chn.HssType().Find("SHUTTER_VIRTUAL_RECEIVER") != -1)
        || (chn.HssType().Find("ACOUSTIC_SIGNAL_VIRTUAL_RECEIVER") != -1)
        || (chn.HssType().Find("SERVO_VIRTUAL_RECEIVER") != -1)
        ) {
          if (virtChnCounter >= 3) {virtChnCounter = 0;}
          virtChnCounter = virtChnCounter + 1;
          if (virtChnCounter != 1) {bShowChannel = false; return;}
        } else {
          ! HmIP-MIOB and HmIP-WHS2
          ! Hide all SWITCH_VIRTUAL_RECEIVER channels other than 3 and 7 (the 2nd virtual channel instead of the first one) when the expert mode is not active
          if ((chn.HssType().Find("SWITCH_VIRTUAL_RECEIVER") != -1)) {
            if ((chNumber != 3) && (chNumber != 7)) {
              bShowChannel = false;
              return;
            }
          }
        }
      }
    }



    ! No hit
    return;
  }
}

! [showChannelParam]
function ::conditionIsParameterVisible() {
  object _oIface = dom.GetObject(oCC.Interface());
  string sInterface = _oIface.Name();

  string hmIPRFIdentifier = "HmIP-RF";
  string hmIPWIdentifier = "HmIP-Wired";
  string HmIPWLabel = "HmIPW-";
  string hmIPVirtualDevIdentifier = "VirtualDevices";
  string bidCosRFIdentifier = "BidCos-RF";
  string wiredIdentifier = "BidCos-Wired";

  string tmp;
  string excludeParams;
  string includeParams = "NOT_IN_USE";
  showChannelParam = true;

  if ( (sInterface == hmIPRFIdentifier) || (sInterface == hmIPWIdentifier) ) {
    excludeParams = "BOOST_TIME,CONTROL_DIFFERENTIAL_TEMPERATURE,ERROR_CODE,ERROR_COMMUNICATION,ERROR_DRIVE,LAST_PASSAGE_DIRECTION,LEVEL_STATUS,LEVEL_2_STATUS,IP_ADDRESS,OPERATING_VOLTAGE,PARTY_,PARTY_MODE,PASSAGE_COUNTER_OVERFLOW,PROCESS,QUICK_VETO_TIME,";
    excludeParams = excludeParams#"RSSI_DEVICE,RSSI_PEER,SECTION,SMOKE_DETECTOR_TEST_RESULT=NONE,STATUS_FLAG_,ABSOLUTE_ANGLE_STATUS,WP_OPTIONS,LOCK_STATE_STATUS,LOCK_TARGET_LEVEL,";
    excludeParams = excludeParams#"TIME_OF_OPERATION,TIME_OF_OPERATION_STATUS,COLOR_TEMPERATURE_STATUS,HUE_STATUS,SATURATION_STATUS,DIM2WARM_STATE,HUMAN_CENTRIC_LIGHT_STATE,INCLUSION_UNSUPPORTED_DEVICE,";
    excludeParams = excludeParams#"ERROR_CONTROL_GEAR_FAILURE,ERROR_LAMP_FAILURE,ERROR_LIMIT,ERROR_DALI_BUS";

    if ((oCC.HssType().Find("DIMMER_TRANSMITTER") != -1)
    || (oCC.HssType().Find("DIMMER_VIRTUAL_RECEIVER")!= -1)
    || (oCC.HssType().Find("BLIND_TRANSMITTER")!= -1)
    || (oCC.HssType().Find("BLIND_VIRTUAL_RECEIVER")!= -1)
    || (oCC.HssType().Find("SHUTTER_TRANSMITTER") != -1)
    || (oCC.HssType().Find("SHUTTER_VIRTUAL_RECEIVER") != -1)
    || (oCC.HssType().Find("DOOR_LOCK_STATE_TRANSMITTER") != -1)
    || (oCC.HssType().Find("UNIVERSAL_LIGHT_RECEIVER") != -1)
    ) {
      if ( oDP.HSSID().Find("ACTIVITY_STATE") != -1 ) {
        if ( sVLValue.Find("STABLE") != -1 ) {
          showChannelParam = false;
        }
      }

      if ((oCC.HssType().Find("DOOR_LOCK_STATE_TRANSMITTER") == -1) && (oCC.HssType().Find("UNIVERSAL_LIGHT_RECEIVER") == -1)) {
        includeParams = "PROCESS";
      }
      return;
    }

    !e. g. MP3P
    if (
    (oCC.HssType().Find("ACOUSTIC_SIGNAL_TRANSMITTER") != -1)
    || (oCC.HssType().Find("ACOUSTIC_SIGNAL_VIRTUAL_RECEIVER") != -1)
    || (oCC.HssType().Find("OPTICAL_SIGNAL_RECEIVER") != -1)
    ) {
      if ( ((oDP.HSSID().Find("LEVEL") != -1) && (oCC.HssType().Find("OPTICAL_SIGNAL_RECEIVER") == -1))
      || (oDP.HSSID().Find("ACTIVITY_STATE") != -1)
      ) {
        showChannelParam = false;
      }
    }

    ! e. g. HmIP-WSC
    if (
      (oCC.HssType().Find("SERVO_VIRTUAL_RECEIVER") != -1)
      || (oCC.HssType().Find("SERVO_TRANSMITTER") != -1)
      || (oCC.HssType().Find("WINDOW_DRIVE_RECEIVER") != -1)
    ) {
      if (oDP.HSSID().Find("ACTIVITY_STATE") != -1) {
        showChannelParam = false;
      }
    }


    !RAIN_DETECTION_TRANSMITTER
    if ((oCC.HssType().Find("RAIN_DETECTION_TRANSMITTER") != -1)) {
      if ( (oDP.HSSID().Find("ACTUAL_TEMPERATURE") != -1)
      || (oDP.HSSID().Find("ACTUAL_TEMPERATURE_STATUS") != -1)
      ) {
        showChannelParam = false;
      }
    }

    ! Check if this is a multi-io channel - the channel can be a key, switch or shutter contact -
    if (oCC.HssType().Find("MULTI_MODE_INPUT_TRANSMITTER") != -1) {

      ! oCC = channel object to read the meta data "channelMode"
      var mode = oCC.MetaData("channelMode");

      ! mode == 0 > the channel is not active
      if ((mode == 0) && (oDP.HSSID().Find("PRESS_LONG") == -1) ) {
        showChannelParam = false;
      }

      ! The default channel mode after teaching in is KEY (no metadata available)
      ! mode == null > default
      ! mode == 1 > the channel acts as a KEY
      if (((mode == null) || (mode == 1)) && (oDP.HSSID().Find("PRESS_") == -1)) {
        showChannelParam = false;
      }

      ! mode == 2 - the channel acts as a SWITCH (not to confuse with a switch actor)
      if ((mode == 2) && (oDP.HSSID().Find("PRESS_SHORT") == -1)) {
        showChannelParam = false;
      }

      ! mode == 3 - the channel acts as a SHUTTER_CONTACT
      if ((mode == 3) && (oDP.HSSID().Find("STATE") == -1)) {
        showChannelParam = false;
      }

      return;
    }

    ! Some blind actors (e. g. HmIPW-DRBL4 or HmIP-DRBLI4) can act as a shutter or a blind.
    ! When acting as a shutter the parameter slat position (LEVEL_2) shouldn't be visible
    if ((oCC.HssType().Find("BLIND_VIRTUAL_RECEIVER") != -1) || (oCC.HssType().Find("BLIND_TRANSMITTER") != -1)) {
      object oMode = dom.GetObject(oCC.Address());
      if (oMode.MetaData("channelMode") == "shutter") {
        if ((oDP.HSSID().Find("LEVEL_2") != -1)) {
          showChannelParam = false;
        }
      }
    }

    ! HmIP-STE2 (differential temperature sensor) - hide the condition parameter ACTUAL_TEMPERATURE_STATUS
    if (oCC.HssType().Find("COND_SWITCH_TRANSMITTER_TEMPERATURE") != -1) {
      if (oCC.Label() == "HmIP-STE2-PCB") {
        if (oDP.HSSID().Find("ACTUAL_TEMPERATURE_STATUS") != -1) {
          showChannelParam = false;
        }
      }
    }

    if ( oCC.HssType().Find("UNIVERSAL_LIGHT_RECEIVER") != -1) {
      if (oCC.Label() == "HmIP-RGBW") {
        object oDevice = dom.GetObject(oCC.Device());
        object oMaintenance = dom.GetObject(oDevice.Channels().GetAt(0));
        integer devMode = oMaintenance.MetaData("deviceMode");

        if ((devMode == 0) || (devMode == 1)) {
          if ( oDP.HSSID().Find("COLOR_TEMPERATURE") != -1 ) {
              showChannelParam = false;
          }
        }
        if (devMode == 2) {
          if ((oDP.HSSID().Find("HUE") != -1) || (oDP.HSSID().Find("SATURATION") != -1)) {
              showChannelParam = false;
          }
        }
        if (devMode == 3) {
          if ((oDP.HSSID().Find("COLOR_TEMPERATURE") != -1) || (oDP.HSSID().Find("HUE") != -1) || (oDP.HSSID().Find("SATURATION") != -1)) {
              showChannelParam = false;
          }
        }
      }

      if (oCC.Label() == "HmIP-DRG-DALI") {
        integer maxCap = oCC.MetaData("maxCap");
        ! maxCap 0 = Switch / 1 = Dimmer / 2 = TW only
        ! maxCap = 3 > this is the RGB + TW mode. Here are all parameters available.

        if (maxCap == 0) {
          ! Switch
          if (
            (oDP.HSSID().Find("ACTIVITY_STATE") != -1)
            || (oDP.HSSID().Find("COLOR_TEMPERATURE") != -1)
            || (oDP.HSSID().Find("HUE") != -1)
            || (oDP.HSSID().Find("SATURATION") != -1)
          ) {
            showChannelParam = false;
          }
        }

        if (maxCap == 1) {
          ! DIMMER
          if (
            (oDP.HSSID().Find("COLOR_TEMPERATURE") != -1)
            || (oDP.HSSID().Find("HUE") != -1)
            || (oDP.HSSID().Find("SATURATION") != -1)
          ) {
            showChannelParam = false;
          }
        }

        if (maxCap == 2) {
          ! Tunable White
          if (
            (oDP.HSSID().Find("ACTIVITY_STATE") != -1)
            || (oDP.HSSID().Find("HUE") != -1)
            || (oDP.HSSID().Find("SATURATION") != -1)
          ) {
            showChannelParam = false;
          }
        }
      }
    }

    !HmIP-WGD(-PL) - Glass Display
    if ((oCC.Label() == "HmIPW-WGD") || (oCC.Label() == "HmIPW-WGD-PL")) {
      ! Hide the parameter DISPLAY_UPDATE_REQUEST_X (X = 1-39)
      if ( oCC.HssType().Find("MAINTENANCE") != -1) {
        if ( oDP.HSSID().Find("DISPLAY_UPDATE_REQUEST") != -1 ) {
          showChannelParam = false;
        }
      }
    }
  }

  if ( sInterface == hmIPVirtualDevIdentifier ) {
    excludeParams = "BOOST_TIME,CONTROL_DIFFERENTIAL_TEMPERATURE,LEVEL_STATUS,OPERATING_VOLTAGE,PARTY_,PARTY_MODE,PROCESS,QUICK_VETO_TIME,";
    excludeParams = excludeParams#"RSSI_DEVICE,RSSI_PEER,SECTION,SMOKE_DETECTOR_TEST_RESULT=NONE,VALVE_STATE";
    return;
  }

  if ( sInterface == bidCosRFIdentifier ) {
    excludeParams = "PARTY_";
    includeParams = "PARTY_MODE";
  }

 ! The check of the type is to prevent the hiding of system vars
  if ((( sInterface == hmIPRFIdentifier ) || ( sInterface == hmIPWIdentifier ) || ( sInterface == bidCosRFIdentifier ) || (sInterface == hmIPVirtualDevIdentifier)) && ( oDP.IsTypeOf( OT_HSSDP ))) {
    foreach (tmp, excludeParams.Split(",")) {
      if (oDP.HSSID().Find(tmp) != -1) {
        foreach (tmp, includeParams.Split(",")) {
          if (oDP.HSSID().Find(tmp) == -1) {
            showChannelParam = false;
          }
        }
        return;
      }
    }
  }
  return;
}

! Filters a single option instead of an entire parameter
! The above function 'conditionIsParameterVisible' blocks a binary parameter completly, means PARAM=TRUE and PARAM=FALSE are blocked
! This function is useful for filtering single options like PARAM=FALSE while PARAM=TRUE is visible
! [showChannelParam]
function ::conditionIsBinaryOptionVisible() {
  showChannelParam = true;
  if (oCC.HssType() == "PASSAGE_DETECTOR_DIRECTION_TRANSMITTER") {
      if ((oDP.HSSID().Find("CURRENT_PASSAGE_DIRECTION") != -1)) {
       showChannelParam = false;
       return;
      }
  }

  if (oCC.HssType() == "ACOUSTIC_SIGNAL_VIRTUAL_RECEIVER") {
      if ((oDP.HSSID().Find("SOUNDFILE_LIST") != -1)) {
       showChannelParam = false;
       return;
      }
  }
  return;
}

! [showChannelParam]
function ::destinationIsParameterVisible() {
  showChannelParam = true;

  ! Hide all parameters of the channel ACOUSTIC_DISPLAY_RECEIVER except COMBINED_PARAMETER
  if (oCH.HssType().Find("ACOUSTIC_DISPLAY_RECEIVER") != -1) {
    if (oDP.HSSID().Find("COMBINED_PARAMETER") == -1)  {
      showChannelParam = false;
    }
  }

  ! Hide the parameter ON_TIME for channels of type PRESENCEDETECTOR_TRANSCEIVER and MOTIONDETECTOR_TRANSCEIVER (SPHM-289)
  if ((oCH.HssType().Find("MOTIONDETECTOR_TRANSCEIVER") != -1) || (oCH.HssType().Find("PRESENCEDETECTOR_TRANSCEIVER") != -1)) {
    if (oDP.HSSID().Find("ON_TIME") != -1)  {
      showChannelParam = false;
    }
  }

  ! Hide all parameters of the channel WEEK_PROFILE (e. g. SWITCH_WEEK_PROFILE, DIMMER_WEEK_PROFILE) except COMBINED_PARAMETER
  if (oCH.HssType().Find("_WEEK_PROFILE") != -1) {
    if (oDP.HSSID().Find("COMBINED_PARAMETER") == -1)  {
      showChannelParam = false;
    }
  }

  !HmIPW-WRC6
  ! Hide all parameters of the channel OPTICAL_SIGNAL_RECEIVER except COMBINED_PARAMETER
  if ( oCH.HssType().Find("OPTICAL_SIGNAL_RECEIVER") != -1) {
    if ( (oDP.HSSID().Find("COMBINED_PARAMETER") == -1)) {
      showChannelParam = false;
    }
  }

  if (oCH.HssType().Find("DOOR_LOCK_STATE_TRANSMITTER") != -1) {
    if (oDP.HSSID().Find("WP_OPTIONS") != -1)  {
      ! if ( sVLValue.Find("NOP") != -1 ) {
      !  showChannelParam = false;
      !}
      showChannelParam = false;
    }
  }

  !HmIP-WSC (Servo Control)
  ! Hide the parameter ON_TIME
  if ( oCH.HssType().Find("SERVO_VIRTUAL_RECEIVER") != -1) {
    if ( (oDP.HSSID().Find("ON_TIME") != -1) || (oDP.HSSID().Find("RAMP_TIME") != -1) ) {
      showChannelParam = false;
    }
  }

  !HmIP-WKP (Keypad)
  ! Hide the parameter CODE_ID
  if ( oCH.HssType().Find("MAINTENANCE") != -1) {
    if ( oDP.HSSID().Find("CODE_ID") != -1 ) {
      showChannelParam = false;
    }
    if ( oDP.HSSID().Find("CODE_COMMAND") != -1 ) {
      showChannelParam = false;
    }
  }

  if ( oCH.HssType().Find("SWITCH_VIRTUAL_RECEIVER") != -1) {

    !HmIP-FWI (Wiegand Interface)
    if (oCH.Label() == "HmIP-FWI") {
      if ( oDP.HSSID().Find("ON_TIME") != -1 ) {
        showChannelParam = false;
      }
      if ( oDP.HSSID().Find("STATE") != -1 ) {
        showChannelParam = false;
      }
    }
  }

  if ( oCH.HssType().Find("DIMMER_VIRTUAL_RECEIVER") != -1) {

    !HmIP-WUA (UNIVERSAL-ACTOR (0 - 10 V)
    if ((oCH.Label() == "HmIP-WUA") || (oCH.Label() == "ELV-SH-WUA") ) {
      if ( oDP.HSSID().Find("COMBINED_PARAMETER") != -1 ) {
        showChannelParam = true;
      } else {
        showChannelParam = false;
      }
    }
  }

    !HmIP-MOD-WD-VK
    ! Hide the parameter ON_TIME
    if ( oCH.HssType().Find("WINDOW_DRIVE_RECEIVER") != -1) {
      if ( (oDP.HSSID().Find("ON_TIME") != -1) || (oDP.HSSID().Find("LEVEL") != -1) ) {
        showChannelParam = false;
      }
    }


  if ( oCH.HssType().Find("UNIVERSAL_LIGHT_RECEIVER") != -1) {
    if ((oCH.Label() == "HmIP-RGBW") || oCH.Label() == "HmIP-DRG-DALI") {
        if ( oDP.HSSID().Find("COMBINED_PARAMETER") != -1 ) {
            showChannelParam = true;
        } else {
          showChannelParam = false;
        }
    }
  }

  !Hide some parameter which are handled with the COMBINED_PARAMETER
  if ((oCH.Label() == "HmIPW-WGD") || (oCH.Label() == "HmIPW-WGD-PL") || ("HmIP-DRG-DALI")) {
    if ( oCH.HssType().Find("MAINTENANCE") != -1) {
      ! Hide the following parameters. We do this with the COMBINED_PARAMETER
      if (
        (oDP.HSSID().Find("IDENTIFICATION_MODE_KEY_VISUAL") != -1)
        || (oDP.HSSID().Find("IDENTIFICATION_MODE_LCD_BACKLIGHT") != -1)
        || (oDP.HSSID().Find("IDENTIFY_DURATION") != -1)
        || (oDP.HSSID().Find("IDENTIFY_TARGET_LEVEL") != -1)
        ) {
        showChannelParam = false;
      }
    }
  }

  return;
}

! [devFwMajor] [devFwMinor] [devFwPatch]
function ::getFirmwareVersion() {
  object channel = dom.GetObject(chnId);
  object dev = dom.GetObject(channel.Device());

  string devMetaData;

  if ( dev != null )
  {
    devMetaData = dev.MetaData("DEVDESC");
    string tmpData;
    string devFirmware;

    foreach(tmpData, devMetaData.Split(","))
    {
      if ((tmpData.Find("AVAILABLE_FIRMWARE") == -1) && (tmpData.Find("FIRMWARE:") > -1)) {
        devFirmware = tmpData.StrValueByIndex(":",1).Substr(1,5);

        devFwMajor = devFirmware.StrValueByIndex(".",0).ToInteger();
        devFwMinor = devFirmware.StrValueByIndex(".",1).ToInteger();
        devFwPatch = devFirmware.StrValueByIndex(".",2).ToInteger();
      }
    }
  }
}

function ::getSpecialTranslationPrgCond() {

  string HmIPWLabel = "HmIPW-";

  ! This is necessary for the passage detector SPDR
  ! The same parameter of the same channel type (ch 2 and 3) must be translated differently.
  if (oCC.HssType() == "PASSAGE_DETECTOR_DIRECTION_TRANSMITTER") {

    ! R2L = Passage Right To Left
    ! L2R = Passage Left To Right

    if (oCC.Label() == "HmIP-SPDR") {
      if (oCC.ChnNumber() == 2) {
        if (sShortKey == "CURRENT_PASSAGE_DIRECTION=TRUE") {sValue = "${stringTableCurrentPassageDirectionR2LTrue}";}
        if (sShortKey == "CURRENT_PASSAGE_DIRECTION=FALSE") {sValue = "${stringTableCurrentPassageDirectionR2LFalse}";}

        if (sShortKey == "LAST_PASSAGE_DIRECTION=TRUE") {sValue = "${stringTableLastPassageDirectionR2LTrue}";}
        if (sShortKey == "LAST_PASSAGE_DIRECTION=FALSE") {sValue = "${stringTableLastPassageDirectionR2LFalse}";}

        if (sShortKey == "PASSAGE_COUNTER_OVERFLOW=TRUE") {sValue = "${stringTablePassageCounterOverflowR2LTrue}";}
        if (sShortKey == "PASSAGE_COUNTER_OVERFLOW=FALSE") {sValue = "${stringTablePassageCounterOverflowR2LFalse}";}

        if (sShortKey == "PASSAGE_COUNTER_VALUE") {sValue = "${stringTablePassageCounterValueR2L}";}
      }

      if (oCC.ChnNumber() == 3) {
        if (sShortKey == "CURRENT_PASSAGE_DIRECTION=TRUE") {sValue = "${stringTableCurrentPassageDirectionL2RTrue}";}
        if (sShortKey == "CURRENT_PASSAGE_DIRECTION=FALSE") {sValue = "${stringTableCurrentPassageDirectionL2RFalse}";}

        if (sShortKey == "LAST_PASSAGE_DIRECTION=TRUE") {sValue = "${stringTableLastPassageDirectionL2RTrue}";}
        if (sShortKey == "LAST_PASSAGE_DIRECTION=FALSE") {sValue = "${stringTableLastPassageDirectionL2RFalse}";}

        if (sShortKey == "PASSAGE_COUNTER_OVERFLOW=TRUE") {sValue = "${stringTablePassageCounterOverflowL2RTrue}";}
        if (sShortKey == "PASSAGE_COUNTER_OVERFLOW=FALSE") {sValue = "${stringTablePassageCounterOverflowL2RFalse}";}

        if (sShortKey == "PASSAGE_COUNTER_VALUE") {sValue = "${stringTablePassageCounterValueL2R}";}
      }
    }
  }

  if (oCC.HssType() == "MULTI_MODE_INPUT_TRANSMITTER") {
    ! oCC = channel object to read the meta data "channelMode"
    var mode = oCC.MetaData("channelMode");

    ! mode 0 - the channel is deactivated
    if ( (mode == 0) && (oDP.HSSID().Find("PRESS_LONG") != -1) ) {
      sValue = "${controlChannelNotActive}";
    }

    ! mode 2 - the channel is a SWITCH (not to confuse with a switch actor)
    if ( (mode == 2) && (oDP.HSSID().Find("PRESS_SHORT") != -1) ) {
      sValue = "${switchCommand}";
    }

    ! mode 3 - the channel is a SHUTTER_CONTACT
    if (mode == 3) {
      if (sShortKey == "STATE=FALSE") {
        sValue = "${stringTableShutterContactStateFalse}";
      }

      if (sShortKey == "STATE=TRUE") {
        sValue = "${stringTableShutterContactStateTrue}";
      }
    }
  }

  if (oCC.HssType() == "ACOUSTIC_SIGNAL_VIRTUAL_RECEIVER") {
    if (sShortKey.Find("SOUNDFILE=SOUNDFILE_") != -1) {
      string no = sShortKey.StrValueByIndex("_",1);
      sValue = "${lblSoundFileNr}: "#no;
    }
  }

  ! Some blind actors (e. g. HmIPW-DRBL4 or HmIP-DRBLI4) can act as a shutter or a blind.
  ! When acting as a shutter the default text (blind) must be replaced by the text shutter
  if ((oCC.HssType().Find("BLIND_VIRTUAL_RECEIVER") != -1) || (oCC.HssType().Find("BLIND_TRANSMITTER") != -1)) {
    object oMode = dom.GetObject(oCC.Address());
    if (oMode.MetaData("channelMode") == "shutter") {
      if (sShortKey == "ACTIVITY_STATE=DOWN") {
        sValue = "${stringTableShutterActivityStateDown}";
      }
      if (sShortKey == "ACTIVITY_STATE=UNKNOWN") {
        sValue = "${stringTableShutterActivityStateUnknown}";
      }
      if (sShortKey == "ACTIVITY_STATE=UP") {
        sValue = "${stringTableShutterActivityStateUp}";
      }
      if (sShortKey == "ACTIVITY_STATE=STABLE") {
        sValue = "${stringTableProcessStableShutterTransmitter}";
      }
      if (sShortKey == "PROCESS=STABLE") {
        sValue = "${stringTableProcessStableShutterTransmitter}";
      }
      if (sShortKey == "PROCESS=NOT_STABLE") {
        sValue = "${stringTableProcessNotStableShutterTransmitter}";
      }
    }
  }

  if (((oCC.Label().Find(HmIPWLabel#"DRD3") != -1) ||((oCC.Label().Find(HmIPWLabel#"DRAP") != -1))) && (oCC.HssType() == "MAINTENANCE")) {
    if (sShortKey.Find("ERROR_UNDERVOLTAGE=TRUE") != -1) {
      sValue = "${stringTableErrorUndervoltageDimmerTrue}";
    }

   if (sShortKey.Find("ERROR_UNDERVOLTAGE=FALSE") != -1) {
     sValue = "${stringTableErrorUndervoltageDimmerFalse}";
   }
  }

  if ((oCC.Label().Find("HmIP-FALMOT-") != -1) && (oCC.HssType() == "CLIMATECONTROL_FLOOR_TRANSCEIVER")) {
    if (sShortKey.Find("LEVEL") != -1) {
      sValue = "${stringTableHeatingLevel}";
    }
  }

  if (oCC.HssType() == "ROTARY_CONTROL_TRANSCEIVER") {
    if (oCC.Label() == "HmIP-WRCR") {
      if (oCC.ChnNumber() == 2) {
        if (sShortKey.Find("PRESS_SHORT") != -1) {
          sValue = "${rotationDirRightFast}";
        }

        if (sShortKey.Find("PRESS_LONG") != -1) {
          sValue = "${rotationDirRightSlow}";
        }
      }
      if (oCC.ChnNumber() == 3) {
        if (sShortKey.Find("PRESS_SHORT") != -1) {
          sValue = "${rotationDirLeftFast}";
        }

        if (sShortKey.Find("PRESS_LONG") != -1) {
          sValue = "${rotationDirLeftSlow}";
        }
      }
    }
  }

  if (oCC.HssType().Find("COND_SWITCH_TRANSMITTER_TEMPERATURE") != -1) {
    if ((oCC.Label() == "HmIP-STE2-PCB") && (oCC.ChnNumber() == 3)) {
      if (sShortKey.Find("ACTUAL_TEMPERATURE") != -1) {
        sValue  = "${stringTableParamSelectT1MinusT2A}";
      }
    }
  }

  ! DLD - Adds the user index to the original value
  if ((oCC.Label().Find("HmIP-DLD") != -1) && (oCC.HssType() == "ACCESS_RECEIVER")) {
    if (sValue.Find("AccessReceiverStateTrue") != -1) {
      sValue = "${lblUser} "#(oCC.ChnNumber() - 1)#" ${stringTableAccessReceiverAccessAuthorizationTrue}";
    }
    if (sValue.Find("AccessReceiverStateFalse") != -1) {
      sValue = "${lblUser} "#(oCC.ChnNumber() - 1)#" ${stringTableAccessReceiverAccessAuthorizationFalse}";
    }
  }

  if ( oCC.HssType().Find("UNIVERSAL_LIGHT_RECEIVER") != -1) {
    if (oCC.Label() == "HmIP-RGBW") {
      object oDevice = dom.GetObject(oCC.Device());
      object oMaintenance = dom.GetObject(oDevice.Channels().GetAt(0));
      integer devMode = oMaintenance.MetaData("deviceMode");

      if ((devMode == 0) || (devMode == 1)) {
        if ( sShortKey.Find("LEVEL") != -1 ) {
            sValue = "${lblColorBrightness}";
        }
      }
      if (devMode == 2) {
        if ( sShortKey.Find("LEVEL") != -1 ) {
            sValue = "${lblColorBrightness}";
        }
      }
      if (devMode == 3) {
        if ( sShortKey.Find("LEVEL") != -1 ) {
            sValue = "${stringTableDimmerLevel}";
        }
      }
    }
  }

  return;
}

function ::getSpecialTranslationPrgDest() {
  ! ASIR - Adds the string "Alarmsignal: " to the original value.
  if (oDP.HSSID() == "ACOUSTIC_ALARM_SELECTION") {
    sValue = "${acousticAlarm}: "#sValue;
  }
  ! ASIR - Adds the string "Alarmsignal: " to the original value.
  if (oDP.HSSID() == "OPTICAL_ALARM_SELECTION") {
    sValue = "${opticalAlarm}: "#sValue;
  }

  if (oCH.HssType() == "ACOUSTIC_SIGNAL_VIRTUAL_RECEIVER") {
    if (sValue.Find("SOUNDFILE=SOUNDFILE_") != -1) {
      string no = sValue.StrValueByIndex("_",1);
      sValue = "${lblSoundFileNr}: "#no;
    }
  }

  ! DLD - Adds the user index to the original value
  if ((oCH.Label().Find("HmIP-DLD") != -1) && (oCH.HssType() == "ACCESS_RECEIVER")) {
    if (sValue.Find("AccessAuthorizationTrue") != -1) {
      sValue = "${lblUser} "#(oCH.ChnNumber() - 1)#" ${stringTableAccessReceiverAccessAuthorizationTrue}";
    }
    if (sValue.Find("AccessAuthorizationFalse") != -1) {
      sValue = "${lblUser} "#(oCH.ChnNumber() - 1)#" ${stringTableAccessReceiverAccessAuthorizationFalse}";
    }
  }

  ! SMI55 (SPHM-725)
  if ((oCH.Label().Find("HmIP-SMI55") != -1) || (oCH.Label().Find("HmIP-SMI55-2") != -1)) {
    object dev = dom.GetObject(oCH.Device());
    if (dev.MetaData("permanentFullRX") != 1) {
      if ((sValue.Find("stringTableMotionDetectorMotionDetectionActiveTrue") != -1 )
      || (sValue.Find("stringTableMotionDetectorMotionDetectionActiveFalse") != - 1)
      || (sValue.Find("stringTableResetStatus") != -1)) {
        sValue = sValue#" ${modeBatNotSupported}";
      }
    }
  }

  return;
}
