function ::CreateGenericInputTransmitter() {

  object objState = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.STATE");
  object objChangeOver = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.CHANGE_OVER");
  object objExternalClock = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.EXTERNAL_CLOCK");
  object objHumidityLimiter = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.HUMIDITY_LIMITER");
  object objTactileSwitch = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.TACTILE_SWITCH");
  object objTemperatureLimiter = cObj.DPByControl("GENERIC_INPUT_TRANSMITTER.TEMPERATURE_LIMITER");

  string modeState = "${unknown}";
  string channelMode = "${unknown}";
  string showState = true;

  if (objState.Value() == false) {modeState = "${stringTableSwitchStateFalse}";}
  if (objState.Value() == true) {modeState = "${stringTableSwitchStateTrue}";}

  if (objChangeOver.Value() == true) {channelMode = "${channelModeChangeOver}";}
  if (objExternalClock.Value() == true) {channelMode = "${channelModeExternalClock}";}
  if (objHumidityLimiter.Value() == true) {channelMode = "${channelModeHumidityLimiter}";}
  if (objTactileSwitch.Value() == true) {channelMode = "${channelModeTactileSwitch}";showState = false;}
  if (objTemperatureLimiter.Value() == true) {channelMode = "${channelModeTemperatureLimiter}";}

  WriteLine("<tr>");

    WriteLine("<td>");
      WriteLine("<div class='ControlBtnInfo CLASS02532a' style='text-align:center; height:30px;'>${stringTableMiobDinConfig}:<br/>"#channelMode#"</div>");
    WriteLine("</td>");

    if (showState == true) {
      WriteLine("<td>");
        WriteLine("<div class='ControlBtnInfo CLASS02532a' style='text-align:center; height:30px;'>"#modeState#"</div>");
      WriteLine("</td>");
    }
  WriteLine("</tr>");
}

function ::CreateGenericMeasuringTransmitter() {

  object objMeasuredValue = cObj.DPByControl("GENERIC_MEASURING_TRANSMITTER.MEASURED_VALUE");
  object objMeasuredValueStatus = cObj.DPByControl("GENERIC_MEASURING_TRANSMITTER.MEASURED_VALUE_STATUS");

  string _unit = cObj.MetaData("measurementUnit");
  string unit = '';
  string _unitDecPl = cObj.MetaData("measurementUnitDecimalPlaces");
  string unitDecPl = 0;
  string measuredVal = "--";

  ! status 0 = NORMAL, 1 = UNKNOWN, 2 = OVERFLOW, 3 = UNDERFLOW, 4 = ERROR
  integer status = 1; ! UNKNOWN

  if (objMeasuredValueStatus) {
    status = objMeasuredValueStatus.Value().ToInteger();

    !WriteLine( "<script>console.log('status: "#status#"');</script>" );

    if (status == 1) {measuredVal = '--';}
    if (status == 2) {measuredVal = '${lblOverflow}';}
    if (status == 3) {measuredVal = '${lblUnderflow}';}
    if (status == 4) {measuredVal = '${lblError}';}
  }

  if (objMeasuredValue && (status == 0)) {
    measuredVal = objMeasuredValue.Value();

    if (_unit) {
      unit = _unit;
    }

    if (_unitDecPl) {
        unitDecPl = _unitDecPl;
    }

  }

  WriteLine("<tr>");
    WriteLine("<td>");
      WriteLine("<div class='ControlBtnInfo CLASS02532a' style='text-align:center; height:30px;'>${lblReading}:<br/>"#measuredVal.ToString(unitDecPl)#" "#unit#"</div>");
    WriteLine("</td>");
  WriteLine("</tr>");
}